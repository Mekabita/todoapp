{"version":3,"sources":["components/TodoForm.jsx","components/TodoList.jsx","components/TodoSearch.jsx","App.js","index.js"],"names":["TodoForm","props","onSubmit","e","preventDefault","todo","target","list","value","trim","addTodo","className","this","type","name","Component","TodoList","style","listStyleType","todolist","map","key","id","onChange","onChecked","defaultChecked","completed","text","current","onClick","deleteTodo","length","deleteAll","React","TodoSearch","placeholder","searchTodo","App","listItem","Date","now","setState","state","console","log","newListItem","item","changeCurrent","completedTodo","filter","activeTodo","newList","searchText","searchedItem","includes","searchList","stringTodoList","JSON","stringify","localStorage","setItem","parse","getItem","filteredList","todolistprops","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9037d72d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass TodoForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const todo = e.target.list.value.trim();\r\n\r\n    if (todo == '') {\r\n      return 0;\r\n    }\r\n    this.props.addTodo(todo);\r\n    e.target.list.value = '';\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"todoform\">\r\n        <form onSubmit={this.onSubmit}>\r\n          <input type=\"text\" name=\"list\" />\r\n          <button>Add</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { Component } from 'react';\r\n\r\nclass TodoList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <ol style={{ listStyleType: 'none' }}>\r\n        {this.props.todolist.map((list) => (\r\n          <div key={list.id} className=\"list\">\r\n            <li className=\"clearfix\">\r\n              <input type=\"checkbox\" onChange={(e) => this.props.onChecked(list.id)} defaultChecked={list.completed} />\r\n              <span className={list.completed ? 'strike' : {}}>{list.text}</span>\r\n              {this.props.current === 'completed' ? (\r\n                <button className=\"btn-delete\" onClick={(e) => this.props.deleteTodo(list.id)}>\r\n                  <i className=\"fas fa-trash-alt\"></i>\r\n                </button>\r\n              ) : (\r\n                ''\r\n              )}{' '}\r\n            </li>\r\n            <hr />\r\n          </div>\r\n        ))}{' '}\r\n        {this.props.todolist.length ? (\r\n          <button className=\"btndelete\" onClick={this.props.deleteAll}>\r\n            Delete\r\n          </button>\r\n        ) : (\r\n          ''\r\n        )}\r\n      </ol>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from 'react';\r\n\r\nclass TodoSearch extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input type=\"text\" className=\"search\" placeholder=\"Search\" onChange={this.props.searchTodo} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoSearch;\r\n","import React from 'react';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\nimport TodoSearch from './components/TodoSearch';\nimport './css/App.css';\nimport '@fortawesome/fontawesome-free/css/all.css'\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todolist: [],\n            current: 'all',\n            searchList: [],\n            searchText: ''\n        };\n    }\n    addTodo = (todo) => {\n        const listItem = {\n            id: Date.now(),\n            text: todo,\n            completed: false\n        };\n        this.setState({\n            todolist: [\n                ...this.state.todolist,\n                listItem\n            ]\n        });\n        console.log(this.state.todolist);\n\n    };\n\n    onChecked = (id) => {\n        const newListItem = this.state.todolist.map((item) => {\n            if (item.id == id) {\n                return {\n                    ...item,\n                    completed: !item.completed\n                };\n            } else \n                return item;\n            \n\n\n        });\n        this.setState({todolist: newListItem});\n    };\n\n    changeCurrent = (current) => {\n        this.setState({current});\n    }\n\n    completedTodo = () => {\n        const completeItem = this.state.todolist.filter((item) => {\n            if (item.completed == true) {\n                return item;\n            }\n        });\n        return completeItem;\n    }\n    activeTodo = () => {\n        const activeItem = this.state.todolist.filter((item) => {\n            if (item.completed == false) {\n                return item;\n            }\n        });\n        return activeItem;\n    }\n    componentDidUpdate() {\n        const stringTodoList = JSON.stringify(this.state.todolist);\n        localStorage.setItem('list', stringTodoList);\n    }\n    componentDidMount() {\n        let list = [];\n            try {\n                list = JSON.parse(localStorage.getItem('list'));\n                if (! list) \n                    list = [];\n                \n\n\n            } catch {\n                list = [];\n            }\n            this.setState( {\n                todolist : list\n            }\n    );\n}\n\ndeleteTodo = (id) => {\n    let newList = this.state.todolist.filter((item) => {\n        if (item.id != id) {\n            return item;\n        }\n\n    });\n    this.setState({todolist: newList});\n}\nsearchTodo = (e) => {\n    console.log(e.target.value);\n    this.setState({searchText: e.target.value}) //\n    let searchedItem = this.state.todolist.filter((item) => {\n        if (item.text.includes(e.target.value)) {\n            return item;\n        }\n    });\n    this.setState({searchList: searchedItem});\n\n}\ndeleteAll = (e) => {\n    console.log(e);\n    console.log('hello');\n    this.setState({todolist: []});\n}\n\nrender() {\n    let filteredList = [];\n    switch (this.state.current) {\n        case 'completed': filteredList = this.completedTodo();\n            break;\n        case 'active': filteredList = this.activeTodo();\n            break;\n        default: filteredList = this.state.todolist;\n    }\n\n    if (this.state.searchText) \n        filteredList = this.state.searchList\n\n\n    \n\n\n    const todolistprops = {\n        todolist: filteredList,\n        onChecked: this.onChecked\n    }\n\n    return (\n        <div className=\"main\">\n            <h1>TODO APP</h1>\n            <TodoSearch searchTodo={\n                this.searchTodo\n            }/>\n            <button className=\"btn\"\n                onClick={\n                    (e) => this.changeCurrent('all')\n            }>All</button>\n            <button className=\"btn\"\n                onClick={\n                    (e) => this.changeCurrent('active')\n            }>Active</button>\n            <button className=\"btn\"\n                onClick={\n                    (e) => this.changeCurrent('completed')\n            }>Completed</button>\n\n\n            <TodoForm addTodo={\n                this.addTodo\n            }/>\n            <TodoList deleteTodo={\n                    this.deleteTodo\n                }\n                current={\n                    this.state.current\n                }\n                deleteAll={\n                    this.deleteAll\n                }\n                {...todolistprops}/>\n\n        </div>\n    );\n}}export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './css/index.css';\nReactDOM.render (<App/>, document.getElementById('root'));\n"],"sourceRoot":""}